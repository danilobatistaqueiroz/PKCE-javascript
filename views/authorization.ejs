<%- include('./partials/head'); %>
<script>

function sha256(plain) {
  const encoder = new TextEncoder();
  const data = encoder.encode(plain);
  return window.crypto.subtle.digest("SHA-256", data);
}
function base64urlencode(a) {
  var str = "";
  var bytes = new Uint8Array(a);
  var len = bytes.byteLength;
  for (var i = 0; i < len; i++) {
    str += String.fromCharCode(bytes[i]);
  }
  return btoa(str)
    .replace(/\+/g, "-")
    .replace(/\//g, "_")
    .replace(/=+$/, "");
}
async function generateCodeChallengeFromVerifier(v) {
  var hashed = await sha256(v);
  var base64encoded = base64urlencode(hashed);
  return base64encoded;
}
function uuidv4() {
  return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
  );
}
function dec2hex(dec) {
  return ("0" + dec.toString(16)).substr(-2);
}
function generateCodeVerifier() {
  var array = new Uint32Array(56 / 2);
  window.crypto.getRandomValues(array);
  return Array.from(array, dec2hex).join("");
}

async function load(){
  let codeVerifier = generateCodeVerifier();
  let codeChallenge = await generateCodeChallengeFromVerifier(codeVerifier);
  localSession.setItem('codeVerifier',codeVerifier);
  localSession.setItem('codeChallenge',codeChallenge);
  localSession.setItem('csrfToken',uuidv4());
  let opt = {
    client_id: 'ny4213rwak4bfv9',
    response_type: 'code',
    code_challenge: localSession.getItem('codeChallenge'),
    code_challenge_method: 'S256',
    redirect_uri: 'http://localhost:3000',
    state: localSession.getItem('csrfToken')
  }
  let query = new URLSearchParams(opt)
  window.location.href = `https://www.dropbox.com/oauth2/authorize?${query}`
}
if(!localSession.getItem('token')){
  load();
}

</script>